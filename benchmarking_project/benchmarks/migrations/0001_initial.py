# Generated by Django 5.0.4 on 2024-06-03 14:25

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='EmbeddingAlgorithm',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50)),
            ],
        ),
        migrations.CreateModel(
            name='Gate',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50)),
                ('qubits', models.IntegerField()),
                ('url1', models.URLField(blank=True)),
                ('url2', models.URLField(blank=True)),
                ('notes', models.TextField(blank=True)),
            ],
        ),
        migrations.CreateModel(
            name='GateSet',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50)),
                ('url1', models.URLField(blank=True)),
                ('url2', models.URLField(blank=True)),
                ('notes', models.TextField(blank=True)),
            ],
        ),
        migrations.CreateModel(
            name='Graph',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50)),
                ('url1', models.URLField(blank=True)),
                ('url2', models.URLField(blank=True)),
                ('notes', models.TextField(blank=True)),
            ],
        ),
        migrations.CreateModel(
            name='Manufacturer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50)),
            ],
        ),
        migrations.CreateModel(
            name='PerformanceMetric',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50)),
            ],
        ),
        migrations.CreateModel(
            name='Solver',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50)),
            ],
        ),
        migrations.CreateModel(
            name='Technology',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50)),
            ],
        ),
        migrations.CreateModel(
            name='TimeType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50)),
            ],
        ),
        migrations.CreateModel(
            name='Topology',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50)),
                ('physical_qubits_per_cell', models.IntegerField()),
                ('qubit_degree', models.FloatField()),
                ('qubit_nominal_length', models.IntegerField(blank=True, default=None, null=True)),
                ('max_qubo_variable_count_clique', models.IntegerField(blank=True, default=None, null=True)),
                ('url1', models.URLField(blank=True)),
                ('url2', models.URLField(blank=True)),
                ('notes', models.TextField(blank=True)),
            ],
        ),
        migrations.CreateModel(
            name='GateSetMembership',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('gate_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='benchmarks.gate')),
                ('gate_set_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='benchmarks.gateset')),
            ],
        ),
        migrations.CreateModel(
            name='Problem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50)),
                ('graph_size', models.IntegerField()),
                ('url1', models.URLField(blank=True)),
                ('url2', models.URLField(blank=True)),
                ('notes', models.TextField(blank=True)),
                ('graph_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='benchmarks.graph')),
            ],
        ),
        migrations.CreateModel(
            name='Processor',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50)),
                ('physical_qubits', models.IntegerField(blank=True, default=None, null=True)),
                ('intro_year', models.IntegerField(blank=True, default=None, null=True)),
                ('rep_rate', models.FloatField(blank=True, default=None, null=True)),
                ('url1', models.URLField(blank=True)),
                ('url2', models.URLField(blank=True)),
                ('notes', models.TextField(blank=True)),
                ('manufacturer_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='benchmarks.manufacturer')),
                ('technology_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='benchmarks.technology')),
                ('topology_id', models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.CASCADE, to='benchmarks.topology')),
            ],
        ),
        migrations.CreateModel(
            name='System',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50)),
                ('intro_year', models.IntegerField(blank=True, default=None, null=True)),
                ('url1', models.URLField(blank=True)),
                ('url2', models.URLField(blank=True)),
                ('notes', models.TextField(blank=True)),
                ('gate_set_id', models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.CASCADE, to='benchmarks.gateset')),
                ('manufacturer_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='benchmarks.manufacturer')),
                ('processor_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='benchmarks.processor')),
            ],
        ),
        migrations.CreateModel(
            name='Calibration',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateTimeField(blank=True, default=None, null=True)),
                ('eplg', models.FloatField(blank=True, default=None, null=True)),
                ('clops', models.IntegerField(blank=True, default=None, null=True)),
                ('median_cz_err', models.FloatField(blank=True, default=None, null=True)),
                ('median_ecr_err', models.FloatField(blank=True, default=None, null=True)),
                ('median_cnot_err', models.FloatField(blank=True, default=None, null=True)),
                ('median_sx_err', models.FloatField(blank=True, default=None, null=True)),
                ('min_1q_err', models.FloatField(blank=True, default=None, null=True)),
                ('max_1q_err', models.FloatField(blank=True, default=None, null=True)),
                ('typical_1q_err', models.FloatField(blank=True, default=None, null=True)),
                ('median_1q_err', models.FloatField(blank=True, default=None, null=True)),
                ('min_2q_err', models.FloatField(blank=True, default=None, null=True)),
                ('max_2q_err', models.FloatField(blank=True, default=None, null=True)),
                ('typical_2q_err', models.FloatField(blank=True, default=None, null=True)),
                ('median_2q_err', models.FloatField(blank=True, default=None, null=True)),
                ('median_readout_err', models.FloatField(blank=True, default=None, null=True)),
                ('spam_err', models.FloatField(blank=True, default=None, null=True)),
                ('mem_err_avg_d1_circuit', models.FloatField(blank=True, default=None, null=True)),
                ('crosstalk_err_mid_circuit', models.FloatField(blank=True, default=None, null=True)),
                ('min_T1', models.FloatField(blank=True, default=None, null=True)),
                ('max_T1', models.FloatField(blank=True, default=None, null=True)),
                ('median_T1', models.FloatField(blank=True, default=None, null=True)),
                ('mean_T1', models.FloatField(blank=True, default=None, null=True)),
                ('min_T2', models.FloatField(blank=True, default=None, null=True)),
                ('max_T2', models.FloatField(blank=True, default=None, null=True)),
                ('median_T2', models.FloatField(blank=True, default=None, null=True)),
                ('mean_T2', models.FloatField(blank=True, default=None, null=True)),
                ('url1', models.URLField(blank=True)),
                ('url2', models.URLField(blank=True)),
                ('notes', models.TextField(blank=True)),
                ('system_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='benchmarks.system')),
            ],
        ),
        migrations.CreateModel(
            name='PerformanceReport',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('qubo_var_count', models.IntegerField(blank=True, default=None, null=True)),
                ('qubo_quad_term_count', models.IntegerField(blank=True, default=None, null=True)),
                ('qubit_count', models.IntegerField(blank=True, default=None, null=True)),
                ('rcs', models.FloatField(blank=True, default=None, null=True)),
                ('mean_chain_length', models.IntegerField(blank=True, default=None, null=True)),
                ('max_chain_length', models.IntegerField(blank=True, default=None, null=True)),
                ('num_runs', models.IntegerField(blank=True, default=None, null=True)),
                ('time', models.FloatField(blank=True, default=None, null=True)),
                ('performance_value', models.FloatField(blank=True, default=None, null=True)),
                ('url1', models.URLField(blank=True)),
                ('url2', models.URLField(blank=True)),
                ('notes', models.TextField(blank=True, default=None, null=True)),
                ('embedding_id', models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.CASCADE, to='benchmarks.embeddingalgorithm')),
                ('performance_metric_id', models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.CASCADE, to='benchmarks.performancemetric')),
                ('problem_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='benchmarks.problem')),
                ('solver_id', models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.CASCADE, to='benchmarks.solver')),
                ('system_id', models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.CASCADE, to='benchmarks.system')),
                ('time_type_id', models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.CASCADE, to='benchmarks.timetype')),
            ],
        ),
    ]
